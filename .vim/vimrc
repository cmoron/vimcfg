" ============================
" 0. Plugins
" ============================

function! BuildYCM(info)
  " info is a dictionary with 3 fields
  " - name:   name of the plugin
  " - status: 'installed', 'updated', or 'unchanged'
  " - force:  set on PlugInstall! or PlugUpdate!
  if a:info.status == 'installed' || a:info.force
    !./install.py --java-completer
  endif
endfunction

call plug#begin()

Plug 'jlanzarotta/bufexplorer'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdtree'
Plug 'airblade/vim-gitgutter'
Plug 'vim-airline/vim-airline'
Plug 'scrooloose/nerdcommenter'
Plug 'flazz/vim-colorschemes'
Plug 'tpope/vim-fugitive'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'honza/vim-snippets'
Plug 'vim-airline/vim-airline-themes'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'dylanaraps/wal.vim'
Plug 'leafgarland/typescript-vim'
Plug 'Quramy/tsuquyomi'
Plug 'PotatoesMaster/i3-vim-syntax'
Plug 'lilydjwg/colorizer'
Plug 'ycm-core/YouCompleteMe', { 'do': function('BuildYCM') }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'jremmen/vim-ripgrep'
Plug 'morhetz/gruvbox'
Plug 'posva/vim-vue'
Plug 'dense-analysis/ale'
Plug 'bam9523/vim-decompile'
Plug 'justinmk/vim-sneak'
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'evanleck/vim-svelte', {'branch': 'main'}
Plug 'github/copilot.vim'

call plug#end()

" ============================
" 1. Settings
" ============================
syntax on
filetype plugin indent on

set shm=atI                " Disable intro screen
set lazyredraw             " Don't redraw screen during macros
set ttyfast                " Improves redrawing for newer computers
set nobk nowb noswf        " Disable backup
set timeoutlen=500         " Lower timeout for mappings
set history=100            " Only store past 100 commands
set undolevels=150         " Only undo up to 150 times
set titlestring=%f title   " Display filename in terminal window
set showcmd                " Show incomplete command at bottom right
set bs=2                   " Allow backspacing over anything
set wrap linebreak         " Automatically break lines
set pastetoggle=<f2>       " Use <f2> to paste in text from other apps
set wildmenu
set wildmode=longest:list,full " Enable command-line tab completion
set completeopt=menu       " Don't show extra info on completions
set ignorecase smartcase   " Only be case sensitive when search has uppercase
set gdefault               " Assume /g flag on :s searches
set hidden                 " Allow hidden buffers
set enc=utf-8              " Enable unicode support
set nofoldenable           " Disable folding
set ruler                  " Enable ruler : Show the line and column number of the cursor position
set number                 " Enable line numbers
set so=7                   " Set scrolloff to 7 : Minimal number of screen lines to keep above and below the cursor.
set cursorline             " Enable the cursorline
set ai                     " Enable autoindent
set et                     " Enable expandtab Indent with spaces
set ts=4                   " Set tabstop to 4 : tab == 4 spaces
set sw=4                   " Set shiftwidth to 4 : indent = 4 spaces
set guifont=Hack\ 14       " Set font
set listchars=tab:→\ ,trail:·,extends:>,precedes:< " Strings to use in 'list' mode and for the |:list| command.
set list                   "show white characters"
set hls                    " Highlight search terms
set t_Co=256               " Enable 256 colors in Terminal
set background=dark        " Set background color
set relativenumber         " Enable relative line numbers
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo " Store .vimfo files in XDG CACHE dir
if filereadable(expand('~/.vim/plugged/gruvbox/colors/gruvbox.vim'))
  colorscheme gruvbox " Set color scheme
endif
"set mouse=a                " Enable mouse support

if has('gui_running')
    set guicursor=a:blinkon0 " Disable blinking cursor
    set columns=220 lines=55 " Default window size
    colorscheme gruvbox      " Set color scheme for gui
endif

" Remove toolbar
set guioptions-=m  "remove menu bar
set guioptions-=T  "remove toolbar
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=L  "remove left-hand scroll bar

" Turn syntax highlighting off for diff
if &diff | syntax off | endif

" Disables automatic commenting on newline
"autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Define ts/sw by filetype (default is 4 spaces)"
autocmd Filetype html setlocal ts=2 sw=2 et
autocmd Filetype javascript setlocal ts=2 sw=2 et
autocmd Filetype vue setlocal ts=2 sw=2 et
autocmd Filetype svelte setlocal ts=2 sw=2 et
" ============================
" 2. Mapping
" ============================
let mapleader = ' '

" Open terminal below
noremap <silent> <F7> :below vert terminal<CR>
noremap <silent> <F8> :below terminal ++rows=15<CR>

" NERDTree mapping
nmap <silent> <F9> :NERDTreeToggle<CR>
nmap <silent> <leader><Tab> :NERDTreeFind<CR>

" Indent backward
imap <S-Tab> <C-o><<

" Scroll down faster
noremap J 2<c-e>
noremap K 3<c-y>

" Buffers - explore/next/previous: Alt-F12, F12, Shift-F12.
noremap <silent> <F12> :BufExplorer<CR>
noremap <silent> <S-F12> :bn<CR>
noremap <silent> <S-F11> :bp<CR>
noremap <silent> <Tab> :bn<CR>
noremap <silent> <S-Tab> :bp<CR>

" ALE
noremap <silent> <F10> :ALEToggle<CR>

" Delete trailing whitespace
map <silent><leader>f :call Format()<CR>

" Reload configuration
nnoremap <Leader><CR> :so ~/.vim/vimrc<CR>

" ============================
" 3. Plugins
" ============================

" FZF
nnoremap <c-p> :FZF<cr>
nnoremap <Leader>p :Buffers<cr>
let g:fzf_preview_window = 'right:60%'

" YCM
nnoremap <leader>g :YcmCompleter GoTo<CR>
" Disable ycm
let g:loaded_youcompleteme = 1

" vim sneak
let g:sneak#label = 1

" Powerline
let g:airline#extensions#tabline#enabled = 1

if !exists('g:airline_symbols')
   let g:airline_symbols = {}
   " unicode symbols
   let g:airline_left_sep = '»'
   let g:airline_left_sep = '▶'
   let g:airline_right_sep = '«'
   let g:airline_right_sep = '◀'
   let g:airline_symbols.linenr = '␊'
   let g:airline_symbols.linenr = '␤'
   let g:airline_symbols.linenr = '¶'
   let g:airline_symbols.branch = '⎇'
   let g:airline_symbols.paste = 'ρ'
   let g:airline_symbols.paste = 'Þ'
   let g:airline_symbols.paste = '∥'
   let g:airline_symbols.whitespace = 'Ξ'
endif

" Copilot
autocmd BufEnter * :Copilot enable
let g:copilot_workspace_folders = ["~/src"]

" ============================
" 4. Functions
" ============================

" Format function
" Call retab function to reset tab characters to match et/ts setting
" Delete trailing whitespaces
function Format()
    :retab
    :%s/\s\+$//e
:endfunction
